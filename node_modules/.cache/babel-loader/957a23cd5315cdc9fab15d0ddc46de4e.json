{"ast":null,"code":"const express = require('express');\n\nconst app = express();\n\nconst bodyParser = require('body-parser');\n\napp.use(bodyParser.json());\nlet persons = [{\n  \"name\": \"Arto Hellas\",\n  \"number\": \"040-123456\",\n  \"id\": 1\n}, {\n  \"name\": \"Martti Tienari\",\n  \"number\": \"040-123456\",\n  \"id\": 2\n}, {\n  \"name\": \"Arto Järvinen\",\n  \"number\": \"040-123456\",\n  \"id\": 3\n}, {\n  \"name\": \"Lea Kutvonen\",\n  \"number\": \"040-123456\",\n  \"id\": 4\n}];\napp.get('/', (req, res) => {\n  res.send('<h1>Hello World!</h1>');\n});\napp.get('/persons', (req, res) => {\n  res.json(persons);\n});\napp.get('/persons/:id', (request, response) => {\n  const id = Number(request.params.id);\n  const person = persons.find(person => person.id === id);\n\n  if (person) {\n    response.json(person);\n  } else {\n    response.status(404).end();\n  }\n});\n\nconst generateId = () => {\n  const maxId = persons.length > 0 ? persons.map(n => n.id).sort().reverse()[0] : 1;\n  return maxId + 1;\n};\n\napp.post('/persons', (request, response) => {\n  const body = request.body;\n\n  if (body.content === undefined) {\n    return response.status(400).json({\n      error: 'content missing'\n    });\n  }\n\n  const person = {\n    content: body.content,\n    important: body.important || false,\n    date: new Date(),\n    id: generateId()\n  };\n  persons = persons.concat(person);\n  response.json(person);\n});\napp.delete('/persons/:id', (request, response) => {\n  const id = Number(request.params.id);\n  persons = persons.filter(person => person.id !== id);\n  response.status(204).end();\n});\nconst PORT = 3001;\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});","map":{"version":3,"sources":["C:/Users/Owner/osa2.4/src/index.js"],"names":["express","require","app","bodyParser","use","json","persons","get","req","res","send","request","response","id","Number","params","person","find","status","end","generateId","maxId","length","map","n","sort","reverse","post","body","content","undefined","error","important","date","Date","concat","delete","filter","PORT","listen","console","log"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,GAAG,GAAGF,OAAO,EAAnB;;AACA,MAAMG,UAAU,GAAGF,OAAO,CAAC,aAAD,CAA1B;;AAEAC,GAAG,CAACE,GAAJ,CAAQD,UAAU,CAACE,IAAX,EAAR;AAEA,IAAIC,OAAO,GAAG,CACV;AACE,UAAQ,aADV;AAEE,YAAU,YAFZ;AAGE,QAAM;AAHR,CADU,EAMV;AACE,UAAQ,gBADV;AAEE,YAAU,YAFZ;AAGE,QAAM;AAHR,CANU,EAWV;AACE,UAAQ,eADV;AAEE,YAAU,YAFZ;AAGE,QAAM;AAHR,CAXU,EAgBV;AACE,UAAQ,cADV;AAEE,YAAU,YAFZ;AAGE,QAAM;AAHR,CAhBU,CAAd;AAwBAJ,GAAG,CAACK,GAAJ,CAAQ,GAAR,EAAa,CAACC,GAAD,EAAMC,GAAN,KAAc;AACzBA,EAAAA,GAAG,CAACC,IAAJ,CAAS,uBAAT;AACD,CAFD;AAIAR,GAAG,CAACK,GAAJ,CAAQ,UAAR,EAAoB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAChCA,EAAAA,GAAG,CAACJ,IAAJ,CAASC,OAAT;AACD,CAFD;AAIAJ,GAAG,CAACK,GAAJ,CAAQ,cAAR,EAAwB,CAACI,OAAD,EAAUC,QAAV,KAAuB;AAC7C,QAAMC,EAAE,GAAGC,MAAM,CAACH,OAAO,CAACI,MAAR,CAAeF,EAAhB,CAAjB;AACA,QAAMG,MAAM,GAAGV,OAAO,CAACW,IAAR,CAAaD,MAAM,IAAIA,MAAM,CAACH,EAAP,KAAcA,EAArC,CAAf;;AAEA,MAAIG,MAAJ,EAAY;AACVJ,IAAAA,QAAQ,CAACP,IAAT,CAAcW,MAAd;AACD,GAFD,MAEO;AACLJ,IAAAA,QAAQ,CAACM,MAAT,CAAgB,GAAhB,EAAqBC,GAArB;AACD;AACF,CATD;;AAWA,MAAMC,UAAU,GAAG,MAAM;AACvB,QAAMC,KAAK,GAAGf,OAAO,CAACgB,MAAR,GAAiB,CAAjB,GAAqBhB,OAAO,CAACiB,GAAR,CAAYC,CAAC,IAAIA,CAAC,CAACX,EAAnB,EAAuBY,IAAvB,GAA8BC,OAA9B,GAAwC,CAAxC,CAArB,GAAkE,CAAhF;AACA,SAAOL,KAAK,GAAG,CAAf;AACD,CAHD;;AAKAnB,GAAG,CAACyB,IAAJ,CAAS,UAAT,EAAqB,CAAChB,OAAD,EAAUC,QAAV,KAAuB;AAC1C,QAAMgB,IAAI,GAAGjB,OAAO,CAACiB,IAArB;;AAEA,MAAIA,IAAI,CAACC,OAAL,KAAiBC,SAArB,EAAgC;AAC9B,WAAOlB,QAAQ,CAACM,MAAT,CAAgB,GAAhB,EAAqBb,IAArB,CAA0B;AAAE0B,MAAAA,KAAK,EAAE;AAAT,KAA1B,CAAP;AACD;;AAED,QAAMf,MAAM,GAAG;AACba,IAAAA,OAAO,EAAED,IAAI,CAACC,OADD;AAEbG,IAAAA,SAAS,EAAEJ,IAAI,CAACI,SAAL,IAAkB,KAFhB;AAGbC,IAAAA,IAAI,EAAE,IAAIC,IAAJ,EAHO;AAIbrB,IAAAA,EAAE,EAAEO,UAAU;AAJD,GAAf;AAOAd,EAAAA,OAAO,GAAGA,OAAO,CAAC6B,MAAR,CAAenB,MAAf,CAAV;AAEAJ,EAAAA,QAAQ,CAACP,IAAT,CAAcW,MAAd;AACD,CAjBD;AAmBAd,GAAG,CAACkC,MAAJ,CAAW,cAAX,EAA2B,CAACzB,OAAD,EAAUC,QAAV,KAAuB;AAChD,QAAMC,EAAE,GAAGC,MAAM,CAACH,OAAO,CAACI,MAAR,CAAeF,EAAhB,CAAjB;AACAP,EAAAA,OAAO,GAAGA,OAAO,CAAC+B,MAAR,CAAerB,MAAM,IAAIA,MAAM,CAACH,EAAP,KAAcA,EAAvC,CAAV;AAEAD,EAAAA,QAAQ,CAACM,MAAT,CAAgB,GAAhB,EAAqBC,GAArB;AACD,CALD;AAOA,MAAMmB,IAAI,GAAG,IAAb;AACApC,GAAG,CAACqC,MAAJ,CAAWD,IAAX,EAAiB,MAAM;AACrBE,EAAAA,OAAO,CAACC,GAAR,CAAa,0BAAyBH,IAAK,EAA3C;AACD,CAFD","sourcesContent":["const express = require('express')\r\nconst app = express()\r\nconst bodyParser = require('body-parser')\r\n\r\napp.use(bodyParser.json())\r\n\r\nlet persons = [\r\n    {\r\n      \"name\": \"Arto Hellas\",\r\n      \"number\": \"040-123456\",\r\n      \"id\": 1\r\n    },\r\n    {\r\n      \"name\": \"Martti Tienari\",\r\n      \"number\": \"040-123456\",\r\n      \"id\": 2\r\n    },\r\n    {\r\n      \"name\": \"Arto Järvinen\",\r\n      \"number\": \"040-123456\",\r\n      \"id\": 3\r\n    },\r\n    {\r\n      \"name\": \"Lea Kutvonen\",\r\n      \"number\": \"040-123456\",\r\n      \"id\": 4\r\n    }\r\n  ]\r\n\r\n\r\napp.get('/', (req, res) => {\r\n  res.send('<h1>Hello World!</h1>')\r\n})\r\n\r\napp.get('/persons', (req, res) => {\r\n  res.json(persons)\r\n})\r\n\r\napp.get('/persons/:id', (request, response) => {\r\n  const id = Number(request.params.id)\r\n  const person = persons.find(person => person.id === id)\r\n\r\n  if (person) {\r\n    response.json(person)\r\n  } else {\r\n    response.status(404).end()\r\n  }\r\n})\r\n\r\nconst generateId = () => {\r\n  const maxId = persons.length > 0 ? persons.map(n => n.id).sort().reverse()[0] : 1\r\n  return maxId + 1\r\n}\r\n\r\napp.post('/persons', (request, response) => {\r\n  const body = request.body\r\n\r\n  if (body.content === undefined) {\r\n    return response.status(400).json({ error: 'content missing' })\r\n  }\r\n\r\n  const person = {\r\n    content: body.content,\r\n    important: body.important || false,\r\n    date: new Date(),\r\n    id: generateId()\r\n  }\r\n\r\n  persons = persons.concat(person)\r\n\r\n  response.json(person)\r\n})\r\n\r\napp.delete('/persons/:id', (request, response) => {\r\n  const id = Number(request.params.id)\r\n  persons = persons.filter(person => person.id !== id)\r\n\r\n  response.status(204).end()\r\n})\r\n\r\nconst PORT = 3001\r\napp.listen(PORT, () => {\r\n  console.log(`Server running on port ${PORT}`)\r\n})"]},"metadata":{},"sourceType":"module"}